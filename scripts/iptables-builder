#!/usr/bin/python

import os
import sys
from optparse import OptionParser
try:
    import configparser
except:
    import ConfigParser as configparser

DEFAULTS = {
    'data'    : '/etc/sysconfig/iptables',
    'basepath': '/etc/iptables-builder/',
    'intput'  : 'INPUT',
    'output'  : 'OUTPUT',
    'forward' : 'FORWARD',
}
DEFAULTS['availablepath'] = os.path.join(DEFAULTS['basepath'], 'available.d/')
DEFAULTS['enabledpath'] = os.path.join(DEFAULTS['basepath'], 'enabled.d/')
CONFIG = os.path.join(DEFAULTS['basepath'],'config')

def gatherRulesFromSourceDir(directory):
    rules = {}
    for rule in os.listdir(directory):
        rule = os.path.join(directory, rule)
        rules[rule] = (x.strip() for x in open(rule,'r').readlines())
    return rules

def compileRules(rules, chains):
    order = rules.keys()
    order.sort()
    output = []
    for ruleset in order:
        for rule in rules[ruleset]:
            rule = rule.split(' ')
            try:
                rule[1] = chains[rule[1]]
            except:
                raise Exception, 'Unknown chain in ruleset %s' % ruleset
            output.append(rule)
    return "\n".join(output)

def saveRules(target, rules):
    open(target, 'w').write(rules)

def main(target, paths, chains, raw):
    try:
        gathered = gatherRulesFromSourceDir(paths['enabled'])
    except OSError, e:
        errorOut('Unable to access source rules', 255)
    try:
        rules = compileRules(rules, chains)
    except Exception, e:
        errorOut(e, 128)
    if raw:
        print rules
    else:
        try:
            saveRules(target, rules)
        except:
            errorOut('Unable to access output file %s\n' % target, 1)
    return

def errorOut(msg, code):
    sys.stderr.write(msg)
    sys.exit(code)

def getConfig(source, defaults):
    config = configparser.SafeConfigParser(defaults)
    config.read(source)
    data = config.get('main','data')
    paths = {}
    paths['base'] = config.get('sources','basepath')
    paths['enabled'] = config.get('sources','enabledpath')
    paths['available'] = config.get('sources','availablepath')
    chains = {}
    chains['input'] = config.get('chains', 'input').upper()
    chains['output'] = config.get('chains', 'output').upper()
    chains['forward'] = config.get('chains', 'forward').upper()
    return (output, paths, chains)

if __name__ == '__main__':
    parser = OptionParser(usage='Usage: %s [-o filename|--raw]')
    parser.add_option('-c', '--config', action="store", default=CONFIG,
            help='Specify alternative configuration file'),
    parser.add_option('-o', '--output-file', action="store", default=None,
            help='Specify alternative output location'),
    parser.add_option('-r', '--rules-dir', action="store", default=None,
            help='Specify alternative output location'),
    parser.add_option('--raw', action="store_true", default=False,
            help='Print output rather than save it to output file'),
    options, args = parser.parse_args()
    try:
        (target, paths, chains) = getConfig(options.config, DEFAULTS)
    except configparser.Error:
        target = DEFAULTS['output']
        paths = {}
        paths['base'] = DEFAULTS['basepath']
        paths['enabled'] = DEFAULTS['enabledpath']
        paths['available'] = DEFAULTS['availablepath']
        chains = {}
        chains['input'] = DEFAULTS['input'].upper()
        chains['output'] = DEFAULTS['output'].upper()
        chains['forward'] = DEFAULTS['forward'].upper()
    if options.output_file is not None:
        output = options.output_file
    if options.rules_dir is not None:
        paths['enabled'] = options.rules_dir
    main(output, paths, chains, options.raw)
